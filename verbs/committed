#!/L/python 3.6
import traceback
from lgtm.LGTMError import LGTMError
from lgtm.LGTMSocket import LGTMSocket
from typing import List, Optional

import os
import socket
import sys


def committed(msg: Optional[bytes]) -> bool:
    """
    Check whether the "COMMIT" command has been (successfully) run at some point
    prior to this command being called.  :param:`msg` is passed to the server if
    provided, but is (as of this writing) irrelevant.

    @returns True if the server responds `COMMITTED`, False for `NOCOMMITTED`,
             raises an :class:`LGTMError` in all other cases.
    """
    sock: socket.socket
    with LGTMSocket() as sock:
        sock.send(b"COMMITTED%s\n" % (b" " + msg) if msg else b"")
        r: List[bytes] = []
        while True:
            # Read response until newline
            c: bytes = sock.recv(1)
            if len(c) == 0 or not isinstance(c, bytes):
                raise RuntimeError("Unclean remote socket shutdown by LGTM IPCd.")
            r.append(c)
            if c == b"\n":
                break
        response: bytes = b"".join(r)

        if response.startswith(b"OK COMMITTED"):
            return True

        if response.startswith(b"OK NOCOMMITTED"):
            return False

        # ERR, NO, or just something from outer space.
        raise LGTMError(response)


def main() -> int:
    if sys.argv or len(sys.argv) not in (1, 2):
        print(
            f"{sys.argv[0]}: At most a single string to follow the COMMITTED "
            "command is permitted.",
            file=sys.stderr,
        )
        return 2

    try:
        if len(sys.argv) > 1:
            msg: bytes = os.fsencode(sys.argv[1])
            return 0 if committed(msg=msg) else 1
        else:
            return 0 if committed(msg=None) else 1
    except LGTMError as e:
        e_msg = str(e)
        if isinstance(e_msg, bytes) and e_msg.startswith((b"NO", b"NO ")):
            print(e_msg.decode("ascii", "xmlcharrefreplace"), file=sys.stderr)
            return 3
        if isinstance(e_msg, bytes) and e_msg.startswith((b"ERR", b"ERR ")):
            print(e_msg.decode("ascii", "xmlcharrefreplace"), file=sys.stderr)
            return 4
        print(repr(e), file=sys.stderr)
        return 5
    except Exception:
        traceback.print_exc()
        return 6


if __name__ == "__main__":
    sys.exit(main())
